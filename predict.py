import pandas as pd
import numpy as np
import joblib
from datetime import datetime
from config import Config
from utils.visualization import plot_signal_quality


class SignalAnalyzer:
    def __init__(self):
        self.model = joblib.load(
            Config.MODELS_DIR /
            "rf_interference_model.pkl"
        )
        self.scaler = joblib.load(
            Config.MODELS_DIR /
            "scaler.pkl"
        )

    def analyze(self, signal):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        signal_df = pd.DataFrame([signal], columns=[
            'frequency',
            'amplitude',
            'snr',
            'bandwidth']
        )
        signal_scaled = self.scaler.transform(signal_df)

        proba = self.model.predict_proba(signal_scaled)[0]
        prediction = self.model.predict(signal_scaled)[0]

        return {
            "frequency": signal[0],
            "amplitude": signal[1],
            "snr": signal[2],
            "bandwidth": signal[3],
            "is_interference": bool(prediction),
            "interference_prob": float(proba[1]),
            "timestamp": datetime.now(),
            "recommendations": self._generate_recommendations(signal, proba)
        }

    def _generate_recommendations(self, signal, proba):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        freq, amp, snr, bw = signal
        recs = []

        if proba[1] > 0.7:
            recs.append(f"üî¥ –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–º–µ—Ö ({proba[1]:.1%})")
            if snr < 10:
                recs.append(f"‚Üí –£–≤–µ–ª–∏—á–∏—Ç—å –º–æ—â–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞ (SNR: {snr:.1f} dB)")
            if bw > 15:
                recs.append(f"‚Üí –£–º–µ–Ω—å—à–∏—Ç—å –ø–æ–ª–æ—Å—É –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è ({bw} MHz)")
        elif proba[1] > 0.3:
            recs.append(f"üü° –í–æ–∑–º–æ–∂–Ω—ã –ø–æ–º–µ—Ö–∏ ({proba[1]:.1%})")
        else:
            recs.append(f"üü¢ –°–∏–≥–Ω–∞–ª —á–∏—Å—Ç—ã–π ({proba[0]:.1%})")

        if amp < -60:
            recs.append(f"‚ö° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω—Ç–µ–Ω–Ω—É (–∞–º–ø–ª–∏—Ç—É–¥–∞ {amp:.1f} dB)")
        if 2400 < freq < 2500:
            recs.append("üì∂ Wi-Fi –¥–∏–∞–ø–∞–∑–æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω")

        return recs


def save_report(report):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ CSV"""
    df = pd.DataFrame([report])
    filepath = Config.REPORTS_DIR / "signal_report.csv"

    if filepath.exists():
        df.to_csv(filepath, mode='a', header=False, index=False)
    else:
        df.to_csv(filepath, index=False)
    print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filepath}")


def manual_input():
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–∞"""
    print("\n" + "="*50)
    print("–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–∞")
    print("="*50)

    freq = float(input("–ß–∞—Å—Ç–æ—Ç–∞ (MHz): "))
    amp = float(input("–ê–º–ø–ª–∏—Ç—É–¥–∞ (dB): "))
    snr = float(input("SNR (dB): "))
    bw = float(input("–®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å—ã (MHz): "))

    return [freq, amp, snr, bw]


def generate_random_signal():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    print("\n" + "="*50)
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
    print("="*50)

    freq = np.random.uniform(*Config.FREQ_RANGE)
    amp = np.random.uniform(*Config.AMP_RANGE)
    snr = np.random.uniform(*Config.SNR_RANGE)
    bw = np.random.choice(Config.BW_OPTIONS)

    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª: {freq:.1f} MHz, {amp:.1f} dB, SNR {snr:.1f} dB, –ø–æ–ª–æ—Å–∞ {bw} MHz")
    return [freq, amp, snr, bw]


def analyze_single_signal(analyzer):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –≤—ã–±–æ—Ä–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª–∞:")
    print("1 - –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("2 - –°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞")
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2): ")

    if choice == '1':
        signal = manual_input()
    elif choice == '2':
        signal = generate_random_signal()
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–≥–Ω–∞–ª")
        signal = generate_random_signal()

    report = analyzer.analyze(signal)
    print("\n" + "="*50)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ {report['frequency']} MHz:")
    print("\n".join(report["recommendations"]))
    plot_signal_quality(signal)
    save_report(report)


def batch_analysis(analyzer, n=5):
    """–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print(f"\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ {n} —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
    for i in range(n):
        signal = generate_random_signal()
        report = analyzer.analyze(signal)
        print(f"\n–°–∏–≥–Ω–∞–ª {i+1}: {report['frequency']} MHz")
        print("\n".join(report["recommendations"]))
        save_report(report)


def main():
    analyzer = SignalAnalyzer()

    while True:
        print("\n" + "="*50)
        print("–ú–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("="*50)
        print("1 - –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
        print("2 - –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤)")
        print("3 - –í—ã—Ö–æ–¥")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ")

        if choice == '1':
            analyze_single_signal(analyzer)
        elif choice == '2':
            batch_analysis(analyzer)
        elif choice == '3':
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


if __name__ == "__main__":
    main()
