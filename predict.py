from datetime import datetime

import joblib
import numpy as np
import pandas as pd

from config import Config
from utils.helpers import generate_signal_with_params, generate_signals_batch
from utils.visualization import (plot_confusion_matrix,
                                 plot_interference_classes,
                                 plot_signal_quality)


class SignalAnalyzer:
    def __init__(self):
        self.model = joblib.load(Config.MODELS_DIR / "rf_interference_model.pkl")
        self.scaler = joblib.load(Config.MODELS_DIR / "scaler.pkl")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º–µ–Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not hasattr(self.scaler, 'feature_names_in_'):
            self.scaler.feature_names_in_ = ['frequency', 'peak_power']

    def analyze(self, signal):
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        signal_df = pd.DataFrame(
            [signal],
            columns=self.scaler.feature_names_in_
        )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
        signal_scaled = self.scaler.transform(signal_df)
        prediction = self.model.predict(signal_scaled)[0]
        proba = self.model.predict_proba(signal_scaled)[0]

        return {
            "frequency": signal[0],
            "peak_power": signal[1],
            "interference_type": prediction,
            "probabilities": dict(zip(Config.INTERFERENCE_TYPES, proba)),
            "timestamp": datetime.now(),
            "recommendations": self._generate_recommendations(signal, prediction)
        }

    def _generate_recommendations(self, signal, prediction):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ç–∏–ø—É –ø–æ–º–µ—Ö"""
        freq, power = signal
        recs = []

        if prediction == "–ò–º–ø—É–ª—å—Å–Ω—ã–µ":
            recs.append("üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–º–ø—É–ª—å—Å–Ω—ã–µ –ø–æ–º–µ—Ö–∏")
            recs.append("‚Üí –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∏–∂–Ω–∏—Ö —á–∞—Å—Ç–æ—Ç")
        elif prediction == "–®–∏—Ä–æ–∫–æ–ø–æ–ª–æ—Å–Ω—ã–µ":
            recs.append("üü° –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —à–∏—Ä–æ–∫–æ–ø–æ–ª–æ—Å–Ω—ã–µ –ø–æ–º–µ—Ö–∏")
            recs.append("‚Üí –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—É–∑–∏—Ç—å –ø–æ–ª–æ—Å—É –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è")
        else:
            recs.append("üü¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–º–µ—à–∞–Ω–Ω—ã–µ –ø–æ–º–µ—Ö–∏")
            recs.append("‚Üí –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞")

        if power > -20:
            recs.append("‚ö° –í—ã—Å–æ–∫–∞—è –º–æ—â–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞ - –≤–æ–∑–º–æ–∂–Ω—ã –∏—Å–∫–∞–∂–µ–Ω–∏—è")
        if freq > 2500:
            recs.append("üì∂ –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω - –≤–æ–∑–º–æ–∂–Ω—ã –ø–æ—Ç–µ—Ä–∏")

        return recs


def save_report(report):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ CSV"""
    df = pd.DataFrame([report])
    filepath = Config.REPORTS_DIR / "signal_report.csv"

    if filepath.exists():
        df.to_csv(filepath, mode='a', header=False, index=False)
    else:
        df.to_csv(filepath, index=False)
    print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filepath}")


def manual_input():
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–∞"""
    print("\n" + "="*50)
    print("–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–∞ LTE")
    print("="*50)

    freq = float(input(f"–ß–∞—Å—Ç–æ—Ç–∞ (MHz) [{Config.FREQ_RANGE[0]}-{Config.FREQ_RANGE[1]}]: "))
    power = float(input(f"–ü–∏–∫–æ–≤–∞—è –º–æ—â–Ω–æ—Å—Ç—å (dBm) [{Config.PEAK_POWER_RANGE[0]}-{Config.PEAK_POWER_RANGE[1]}]: "))

    return [freq, power]


def generate_random_signal():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ LTE"""
    print("\n" + "="*50)
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ LTE")
    print("="*50)

    freq = np.random.uniform(*Config.FREQ_RANGE)
    power = np.random.uniform(*Config.PEAK_POWER_RANGE)

    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª: {freq:.1f} MHz, {power:.1f} dBm")
    return [freq, power]


def analyze_single_signal(analyzer):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –≤—ã–±–æ—Ä–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª–∞:")
    print("1 - –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("2 - –°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞")
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2): ")

    if choice == '1':
        signal = manual_input()
    elif choice == '2':
        signal = generate_random_signal()
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–≥–Ω–∞–ª")
        signal = generate_random_signal()

    report = analyzer.analyze(signal)
    print("\n" + "="*50)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ {report['frequency']} MHz:")
    print("\n".join(report["recommendations"]))
    plot_signal_quality(signal)
    save_report(report)


def batch_analysis(analyzer, n=5):
    """–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print(f"\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ {n} —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ LTE...")
    for i in range(n):
        signal = generate_random_signal()
        report = analyzer.analyze(signal)
        print(f"\n–°–∏–≥–Ω–∞–ª {i+1}: {report['frequency']} MHz")
        print("\n".join(report["recommendations"]))
        save_report(report)


def main():
    analyzer = SignalAnalyzer()

    while True:
        print("\n" + "="*50)
        print("–ú–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ LTE")
        print("="*50)
        print("1 - –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
        print("2 - –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤)")
        print("3 - –í—ã—Ö–æ–¥")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ")

        if choice == '1':
            analyze_single_signal(analyzer)
        elif choice == '2':
            batch_analysis(analyzer)
        elif choice == '3':
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


if __name__ == "__main__":
    main()
