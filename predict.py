import numpy as np
import pandas as pd
import joblib
from datetime import datetime
from config import Config
from utils.visualization import plot_signal_quality


class SignalAnalyzer:
    def __init__(self):
        self.model = joblib.load(Config.MODELS_DIR / "rf_interference_model.pkl")
        self.scaler = joblib.load(Config.MODELS_DIR / "scaler.pkl")

    def analyze(self, signal):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞"""
        signal_scaled = self.scaler.transform([signal])
        proba = self.model.predict_proba(signal_scaled)[0]
        prediction = self.model.predict(signal_scaled)[0]

        return {
            "frequency": signal[0],
            "amplitude": signal[1],
            "snr": signal[2],
            "bandwidth": signal[3],
            "is_interference": bool(prediction),
            "interference_prob": float(proba[1]),
            "timestamp": datetime.now(),
            "recommendations": self._generate_recommendations(signal, proba)
        }

    def _generate_recommendations(self, signal, proba):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        freq, amp, snr, bw = signal
        recs = []

        if proba[1] > 0.7:
            recs.append(
                "üî¥ –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–º–µ—Ö ({:.1%})"
                .format(proba[1])
            )
            if snr < 10:
                recs.append(
                    "‚Üí –£–≤–µ–ª–∏—á–∏—Ç—å –º–æ—â–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞ (—Ç–µ–∫—É—â–∏–π SNR: {:.1f} dB)"
                    .format(snr)
                )
            if bw > 15:
                recs.append(
                    "‚Üí –£–º–µ–Ω—å—à–∏—Ç—å –ø–æ–ª–æ—Å—É –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è (—Ç–µ–∫—É—â–∞—è: {} MHz)"
                    .format(bw)
                )
        elif proba[1] > 0.3:
            recs.append("üü° –í–æ–∑–º–æ–∂–Ω—ã –ø–æ–º–µ—Ö–∏ ({:.1%})".format(proba[1]))
        else:
            recs.append("üü¢ –°–∏–≥–Ω–∞–ª —á–∏—Å—Ç—ã–π ({:.1%})".format(proba[0]))

        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if amp < -60:
            recs.append("‚ö° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω—Ç–µ–Ω–Ω—É (–∞–º–ø–ª–∏—Ç—É–¥–∞ {:.1f} dB)".format(amp))
        if 2400 < freq < 2500:
            recs.append("üì∂ Wi-Fi –¥–∏–∞–ø–∞–∑–æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω")

        return recs


def save_report(report):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ CSV"""
    df = pd.DataFrame([report])
    filepath = Config.REPORTS_DIR / "signal_report.csv"

    if filepath.exists():
        df.to_csv(filepath, mode='a', header=False, index=False)
    else:
        df.to_csv(filepath, index=False)


def main():
    analyzer = SignalAnalyzer()

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    test_signals = [
        [915.0, -55.0, 12.0, 10.0],
        [880.0, -65.0, 8.0, 20.0],
        [2450.0, -70.0, 5.0, 40.0]
    ]

    for signal in test_signals:
        report = analyzer.analyze(signal)
        print(f"\n–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ {report['frequency']} MHz:")
        print("\n".join(report["recommendations"]))
        plot_signal_quality(signal)
        save_report(report)


if __name__ == "__main__":
    main()
